@startuml
interface Iterator.Iterator {
+ boolean hasNext()
+ Object next()
}
interface Iterator.Aggregate {
+ Create Iterator()
+ Iterator()
}
class Iterator.Concrete_Iterator {
+ {static} void hasNext():Next
}
class Iterator.Concrete_Aggregate {
+ {static} void Create Iterator():Iterator
}


Iterator.Iterator <|..|> Iterator.Aggregate 
Iterator.Aggregate ..> Iterator.Concrete_Iterator 
Iterator.Concrete_Iterator ..> Iterator.Iterator 
Iterator.Concrete_Aggregate ..> Iterator.Aggregate 
@enduml
 

@startuml
interface Visitor.Studying_In_Institute {
+ void accept()
+ void teaching()
+ void studying()
}
class Visitor.Instructor {
+ void visit()
+ void teaching()


}
class Visitor.Student {
+ void visit()
+ void studying()
}
class Visitor.SDE {
+ void create(ProjectClass)
+ void create(DataBase)
 
+ void create(Test)
}
class Visitor.STL {
+ void beWritten(Developer)
}
class Visitor.DSA {
+ {static} void main(String[])
}


Visitor.DSA <|.. Visitor.Student 
Visitor.DSA <|.. Visitor.Instructor
Visitor.SDE <|.. Visitor.Student 
Visitor.SDE <|.. Visitor.Instructor 
Visitor.STL <|.. Visitor.Student 
Visitor.STL <|.. Visitor.Instructor
Visitor.Studying_In_Institute <|.. Visitor.Instructor
Visitor.Studying_In_Institute <|.. Visitor.Student
@enduml
